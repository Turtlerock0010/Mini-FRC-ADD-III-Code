--Key Information--
Version: 9
Push date: 12/15/2024
Contributor: @Comandline
Language: C
Libraries: Alfredo_NoU2, PestoLink-Receive
Controller: https://pestol.ink
ESP32 Board: #2
NoU2 Board: #3

--Things To Do Before Pushing Code To ESP32--
1. follow the tutorial to the last detail https://alfredo-nou2.readthedocs.io/en/latest/robot_programming_tutorial_Pesto_Link.html#setup
2. make sure the board of "ESP32 Dev Module" is selected
3. go to tools -> port, then select the port that has "/dev/cu.usbserial-56820021541
4. THIS IS IMPORTANT, WE COULDN'T GET SHIT TO WORK WITHOUT THIS, Tools -> Upload Speed, then select 115200
5. make sure the battery is connected to the NoU2 board and the pale button is pressed down
6. the Anthony Demarcus Demetri III's wheels aren't touching the ground if using joystick

--Extra Notes--
- please flip the wheels fabricators
- The robot on bluetooth is called Anthony Demarcus Demitri III
- When using Joystick or uploading code to control using Joystick keep it the wheels not touching any surface
- in the file wasd.c there is a code with frontleftMotor.set(-1); I do not know if it works

--Version 1 Changelog--
- First version! yippie
- Two driving systems are created
  - Joystick, uses PestoLink's joystick
  - WASD, uses PestoLink's mappable buttons
 NOTE: please don't combine both scripts they have everything in them

--Version 2 Changelog--
- The button 0 is used to test the servo
- Pesto Link website is added to the Notes

--Version 3 Changelog--
- Spelling Changes to the robot's name
- Bluetooth fix added

--Version 4 Changelog--
- Deletion of "bluetoothfix.c" file
- Deletion of "wasd.c" file
- Renamed "joystick.c" file to "main.c"
- Movement system has been decided which is joystick controls on android
- Defined the motors pickUpMotor and shooterMotor
- Defined the servo aimServo
- Button 2 activates pickUpMotor
- Button 3 activates shooterMotor
- New board tally for how much ESP32 and NoU2 boards we go through
- Very big version indeed.

--Version 5 Changelog--
- More comments to existing code
- New integer value "aimDegree"
- New integer value "rotationSpeed"
- Added code for aimServo Functionality
 - Button 0 aims the servo down
 - Button 1 aims the servo up

--Version 6 Changelog--
- More comments
- Fixed faulty code with no semicolons

--Version 7 Changelog--
- Fixed pickUpMotor direction to match robot design
- Changed the Bluetooth Low Energy baud rate from 9600 to 115200
- Pushed possible fix to the aimServo not responding (Credit: @amitac)
- Readied bot for Windows connection
- Bring a windows laptop nerd so you can code
- Readied bot for xbox controller connection

--Version 8 Changelog--
- Added limits to changes to aimDegree 
- Fixed faulty code of changing the servo servo degree
- Archived aimServo fix from @amitac
- Changed the change speed of the degree from 1 to 0.1
- Experimental 4th button made, initally a button combo
- Changed and undo the baud rate from 9600 to 115200

--Version 9 Changelog-- (Final Changelog)
- Changed limits to aimDegree to match driver's needs
- Added a button combo to allow for a full reversal of all shooting functions
- Added a delay that makes the aimServo finally slower
- Reversed throttle and rotation to allow for the robot to be driven backwards
- Added quick access variables for quick changes
- Last Version, Thanks For Watching! (Final Remarks Below)

--Closing Remarks--
This is really the end of this repository, isn't it? Well it is and I
would like to provide some closing remarks. First of all, I am thankful
of this opportunity of Mini FRC 10.5, and the team Pink Fluffy Unicorns
for allowing me to code and express my true skills to the test. I would
like to thank everyone who helped us get through the techinical
difficulties with the ESP32 and NoU2, if it wasn't for them the robot
would have been cooked to the highest degree. From this repository I have
helped 2 other teams (also credited in them too) for code and had got
help physically from those teams with their fab skills. Anyways closing
this statement I am excited for Mini FRC 11 in summer and will use the
skills I learned here to help code a better robot (and absolutely get
some autos in.) so HYPE. Here is something I would do and is provide a
closing sentence that would only makes sense to a specific fandom.
Thanks To Them of Alfredo Systems and Terrorbytes, I wouldn't have made
the robot if it weren't for them. I hope this repository will help me For
The Future and beyond. Finally, keep Watching And Dreaming folks, and I 
will see you next time.

-@Commandline